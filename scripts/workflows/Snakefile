from os.path import join
from samples import Samples
import json

work = '/work/FAC/FBM/DMF/smitri/evomicrocomm/genome_size/data/'

def get_strain(wildcards):
    return Samples().abbreviations[wildcards.strain]

rule mapping:
    input:
        reference = join(work,'{strain}','reference.fasta'),
        read1 = join(work,'{sample}','read1.fq.gz'),
        read2 = join(work,'{sample}','read2.fq.gz')
    output:
        join(work,'{sample}','{strain}','mapped_reads.sorted.bam')
    threads:
        16
    shell:
        """
        minimap2 --secondary=no -t 16 -R '@RG\\tID:snippy\\tSM:snippy' -ax sr {input} | samtools view \
        -S -b --threads 16 | samtools sort --threads 16 -o {output}
        samtools index {output}
        """

rule snippy:
    input:
        reference = join(work,'{strain}','reference.gbk'),
        bam = join(work,'{sample}','{strain}','mapped_reads.sorted.bam')
    output:
        outfile = join(work,'{sample}','{strain}','snippy','snps.tab')
    threads:
        16
    params:
        outdir = join(work,'{sample}','{strain}','snippy')
    shell:
        """
        snippy --cpus 16 --force --ram 256 --minfrac 0.8 --cleanup --outdir \
        {params} --reference {input.reference} --bam {input.bam}
        """
rule labels:
    output:
        join(work,'{sample}','{strain}','labels.json')
    params:
        outdir = join(work,'{sample}','{strain}'),
        strain = get_strain
    threads:
        1
    shell:
        "python create_labels.py {wildcards.sample} {params.strain} {params.outdir}"

rule report:
    input:
        labels = join(work,'{sample}','{strain}','labels.json'),
        reference = join(work,'{strain}','reference.fasta'),
        bam = join(work,'{sample}','{strain}','mapped_reads.sorted.bam')
    output:
        join(work,'{sample}','{strain}','report.md')
    params:
        outdir = join(work,'{sample}','{strain}')
    threads:
        16
    shell:
        "report_bam_stats {input.reference} {input.bam} {input.labels} {params.outdir}"
